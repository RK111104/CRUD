@page  "/games/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Games</h3>
<a href="/games/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Add Games
</a>
<br />
<br />
@if (Games == null)
{
    <div class="alert alert-info">Loading Games..</div>
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Game Name</th>
                <th>Game Company</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var game in Games)
            {
            <tr>
                <td>@game.GameName</td>
                <td>@game.GameCompany</td>
                <td>
                    <a href="/games/view/@game.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/games/edit/@game.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(game.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}



@code {
    private List<Games> Games;

    protected async override Task OnInitializedAsync()
    {
        Games = await _client.GetFromJsonAsync<List<Games>>($"{Endpoints.GamesEndPoint}");
    }

    async Task Delete(int gameId)
    {
        var game = Games.First(q => q.Id == gameId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"do you want to delete {game.GameName}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.GamesEndPoint}/{gameId}");
            await OnInitializedAsync();

        }
    }

}