@page  "/reviews/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]



<h3 class="card-title">Reviews</h3>
<a href="/reviews/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Add Reviews
</a>
<br />
<br />

<h3 class="card-title">Reviews</h3>
@if (Reviews == null)
{
    <div class="alert alert-info">Loading Reviews..</div>
}

else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Game Title</th>
                <th>Review Description</th>
                <th>Rating</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var review in Reviews)
            {
            <tr>
                <td>@review.ReviewTitle</td>
                <td>@review.ReviewDescription</td>
                <td>@review.Rating</td>
                <td>
                    <a href="/reviews/view/@review.ID" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/reviews/edit/@review.ID" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(review.ID))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>

            }
        </tbody>
    </table>
}



@code {
    private List<Reviews> Reviews;

    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Reviews>>($"{Endpoints.ReviewsEndPoint}");
    }

    async Task Delete(int reviewId)
    {
        var review = Reviews.First(q => q.ID == reviewId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"do you want to delete {review.ReviewTitle}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ReviewsEndPoint}/{reviewId}");
            await OnInitializedAsync();

        }
    }

}