@page "/reviews/create/"
@inject HttpClient _client
@inject NavigationManager _navManager


<h3 class="card-title">Add Review</h3>
<hr />
<br />

<EditForm Model="@review" OnValidSubmit="CreateReview">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label>Add Game Title: </label>
        <div>
            <InputText @bind-Value="@review.ReviewTitle" class="form-control" />
            <ValidationMessage For="@(() => review.ReviewTitle)" />
        </div>
    </div>

    <div class="form-group">
        <label>Add Review Description: </label>
        <div>
            <InputText @bind-Value="@review.ReviewDescription" class="form-control" />
            <ValidationMessage For="@(() => review.ReviewDescription)" />
        </div>
    </div>

    <div class="form-group">
        <label>Add Review Rating: </label>
        <div>
            <InputNumber @bind-Value="@review.Rating" class="form-control" />
            <ValidationMessage For="@(() => review.Rating)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Review
    </button>

    <BackToList Target="reviews" />
    <ValidationSummary />

</EditForm>

@code {
    Reviews review = new Reviews();

    private IList<Reviews> Reviews;


    protected async override Task OnInitializedAsync()
    {
        Reviews = await _client.GetFromJsonAsync<List<Reviews>>($"{Endpoints.ReviewsEndPoint}");
    }

    private async Task CreateReview()
    {
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndPoint, review);
        _navManager.NavigateTo("/reviews/");
    }


}


